/*
Signals and Slots:

 Qt's signals and slots mechanism ensures that if you connect a signal to a slot, the slot will be called with the signal's parameters at the right time. Signals and slots can take any number of arguments of any type. They are completely type safe.

Signals are emitted by objects when they change their state in a way that may be interesting to other objects

Slots can be used for receiving signals, but they are also normal member functions. Just as an object does not know if anything receives its signals, a slot does not know if it has any signals connected to it. This ensures that truly independent components can be created with Qt.

You can connect as many signals as you want to a single slot, and a signal can be connected to as many slots as you need. It is even possible to connect a signal directly to another signal. (This will emit the second signal immediately whenever the first is emitted.)

Signals are public access functions and can be emitted from anywhere, but we recommend to only emit them from the class that defines the signal and its subclasses.

Execution of the code following the emit statement will occur once all slots have returned. The situation is slightly different when using queued connections; in such a case, the code following the emit keyword will continue immediately, and the slots will be executed later.

If several slots are connected to one signal, the slots will be executed one after the other, in the order they have been connected, when the signal is emitted.

Signals are automatically generated by the moc and must not be implemented in the .cpp file.

Just like, a button clicked is a signal, and the funtion that is evoked in reponse to this, is slot.

 emit valueChanged(value); The emit line emits the signal valueChanged() from the object, with the new value as argument.


*/

#include "mainwindow.h"
#include "./ui_mainwindow.h"

#include <QDebug>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    // UI Widgets

    // gobutton = ui->gobutton;
    // connect(gobutton, &QPushButton::clicked, this,  &MainWindow::on_gobutton_clicked);

    backbutton = ui->backbutton;
    forwardbutton = ui->forwardbutton;
    reloadbutton = ui->reloadbutton;

    searchbar = ui->searchbar;
    view = ui->webengineview;

    backbutton->setIcon(QIcon(":/res/icon/arrow_back_black.svg"));
    forwardbutton->setIcon(QIcon(":/res/icon/arrow_forward_black.svg"));
    reloadbutton->setIcon(QIcon(":/res/icon/reload_black.svg"));

    searchbar->setPlaceholderText(QStringLiteral("Search with Google or type a URL"));

    // Layouting
    // QVBoxLayout *vlayout = ui->verticalLayout;
    // vlayout->addWidget(view);


    view->load(QUrl("qrc:res/webpages/startup_light.html"));
    connect(view, &QWebEngineView::urlChanged, this, &MainWindow::onUrlChanged);

    this->showMaximized();
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::onUrlChanged(const QUrl &url){
    if (!url.isEmpty() && QString::compare(url.toString(), "qrc:res/webpages/startup_light.html", Qt::CaseSensitive) != 0) {
        searchbar->setText(url.toDisplayString());
        searchbar->setCursorPosition(0);
    }

    /* TODO - Highlighting only domain */
}

bool MainWindow::isUrl(QString query){
    /*
`   Rule : If containing spaces, then not a url
           If not starts with http:// or https:// (as of now) then not a url
    */
    if (query.split(' ').size() > 1) {
        return false;
    }

    if (!query.startsWith("http://") && !query.startsWith("https://")) {
        return false;
    }

    return true;

    // Check for query start with www. and add protocols to them
    // check for IPs and localhost

    /*
    Or using

    QUrl url = QUrl::fromUserInput(query);
    if (url.isValid() && !query.contains(' ')) {
        return true;  // Treat as URL
    } else {
        return false; // Treat as search query
    }
    */
}

QUrl MainWindow::strToGoogleUrl(QString query){
    return QUrl("https://www.google.com/search?q=" + QUrl::toPercentEncoding(query));
}

void MainWindow::on_searchbar_returnPressed()
{
    qDebug() << "Rrturned Pressed!!";
    QString searchQuery = searchbar->text();
    QUrl encodedUrl;

    /*
    URL PARSING
    SEARCH ENGINE INTEGRATION
    CUSTOM LANDING PAGE
    SHOW URL AND SEARCHBAR PLACEHOLDER
    */

    if(!searchQuery.isEmpty()){
        if(!isUrl(searchQuery)){
            qDebug("invalid url\n");
            encodedUrl = strToGoogleUrl(searchQuery);
        }else{
            qDebug("valid url\n");
            encodedUrl = QUrl(searchQuery.toUtf8());
        }
        view->load(encodedUrl);
        searchbar->setText(encodedUrl.toDisplayString());
        view->setFocus();
        // searchbar->setText(view->url().toDisplayString());
    }



    // view->hide();
}

